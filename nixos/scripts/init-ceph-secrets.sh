#!/usr/bin/env bash
# /etc/nixos/scripts/init-ceph-secrets.sh (version avec gestion des cl√©s)
export SOPS_AGE_KEY_FILE="/etc/nixos/secrets/keys/age-keys.txt"

set -euo pipefail

SECRETS_BASE="/etc/nixos/secrets"
SECRETS_DIR="$SECRETS_BASE/ceph"
AGE_KEY_FILE="$SECRETS_BASE/keys/age-keys.txt"

echo "üîë Initialisation des secrets Ceph avec sops-nix"

# Changement vers le r√©pertoire de base des secrets
cd "$SECRETS_BASE"
echo "üìÅ R√©pertoire de travail: $(pwd)"

# V√©rification des pr√©requis
if ! command -v sops &> /dev/null; then
    echo "‚ùå sops n'est pas install√©"
    exit 1
fi

if [ ! -f ".sops.yaml" ]; then
    echo "‚ùå Fichier .sops.yaml manquant"
    exit 1
fi

if [ ! -f "$AGE_KEY_FILE" ]; then
    echo "‚ùå Cl√© age priv√©e manquante: $AGE_KEY_FILE"
    exit 1
fi

echo "‚úÖ Configuration sops trouv√©e"

# Configuration de la cl√© age pour sops
export SOPS_AGE_KEY_FILE="$AGE_KEY_FILE"
echo "üîë Utilisation de la cl√© age: $SOPS_AGE_KEY_FILE"

# Cr√©ation de la structure
mkdir -p ceph

# G√©n√©ration du FSID
FSID=$(uuidgen)
echo "üìù FSID g√©n√©r√©: $FSID"

# G√©n√©ration des cl√©s Ceph
generate_ceph_key() {
    python3 -c "
import base64
import os
key = base64.b64encode(os.urandom(16)).decode('ascii')
print(f'AQBWlyBh+RJeFRAA{key}==')
"
}

ADMIN_KEY=$(generate_ceph_key)
MON_KEY=$(generate_ceph_key)
BOOTSTRAP_OSD_KEY=$(generate_ceph_key)
BOOTSTRAP_MDS_KEY=$(generate_ceph_key)
BOOTSTRAP_RGW_KEY=$(generate_ceph_key)

echo "üîê Cl√©s Ceph g√©n√©r√©es"

# Cr√©ation des fichiers temporaires
cat > ceph/cluster-temp.yaml << EOF
fsid: "$FSID"
admin_key: "$ADMIN_KEY"
bootstrap_osd_key: "$BOOTSTRAP_OSD_KEY"
bootstrap_mds_key: "$BOOTSTRAP_MDS_KEY"
bootstrap_rgw_key: "$BOOTSTRAP_RGW_KEY"
EOF

cat > ceph/monitors-temp.yaml << EOF
mon_key: "$MON_KEY"
jade_mon_key: "$MON_KEY"
emy_mon_key: "$MON_KEY"
ruby_mon_key: "$MON_KEY"
EOF

# Chiffrement avec sops
echo "üîê Chiffrement des secrets..."

if sops -e ceph/cluster-temp.yaml > ceph/cluster.yaml; then
    echo "‚úÖ cluster.yaml chiffr√©"
    rm -f ceph/cluster-temp.yaml
else
    echo "‚ùå √âchec du chiffrement cluster.yaml"
    exit 1
fi

if sops -e ceph/monitors-temp.yaml > ceph/monitors.yaml; then
    echo "‚úÖ monitors.yaml chiffr√©"
    rm -f ceph/monitors-temp.yaml
else
    echo "‚ùå √âchec du chiffrement monitors.yaml"
    exit 1
fi

echo "üéâ Initialisation des secrets termin√©e!"
echo "üìÅ Secrets disponibles dans: $SECRETS_DIR"
echo ""

# Test de d√©chiffrement
echo "üîç Test de d√©chiffrement..."
if sops -d ceph/cluster.yaml > /dev/null 2>&1; then
    echo "‚úÖ Test de d√©chiffrement cluster.yaml r√©ussi"
    echo "üîç Aper√ßu du FSID:"
    sops -d ceph/cluster.yaml | grep fsid
else
    echo "‚ùå Probl√®me de d√©chiffrement cluster.yaml"
fi

if sops -d ceph/monitors.yaml > /dev/null 2>&1; then
    echo "‚úÖ Test de d√©chiffrement monitors.yaml r√©ussi"
else
    echo "‚ùå Probl√®me de d√©chiffrement monitors.yaml"
fi

echo ""
echo "üìã Commandes utiles:"
echo "# Voir tous les secrets cluster:"
echo "SOPS_AGE_KEY_FILE=$AGE_KEY_FILE sops -d ceph/cluster.yaml"
echo ""
echo "# Voir tous les secrets monitors:"
echo "SOPS_AGE_KEY_FILE=$AGE_KEY_FILE sops -d ceph/monitors.yaml"
EOF

