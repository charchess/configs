# /etc/nixos/docker-label.nix
#
# Module NixOS pour l'étiquetage automatique des nœuds Docker Swarm.
# Cette version sépare correctement les 'options' et la 'config'.

{ lib, config, pkgs, ... }:

{
  # =================================================================
  #  PARTIE 1 : Déclaration des Options Configurables
  # =================================================================
  # Tout ce qui est une "option" doit être défini ici.

  options = {
    myConfig.isCephNode = lib.mkEnableOption "this node is a Ceph storage node (OSD)";
  };


  # =================================================================
  #  PARTIE 2 : Configuration du Système (Implémentation)
  # =================================================================
  # Tout ce qui est une "configuration" (services, paquets, etc.)
  # doit aller à l'intérieur de ce bloc 'config'.

  config = {
    # On peut utiliser lib.mkIf pour n'activer ce module que si une condition est remplie.
    # Par exemple, si Docker est activé.
    # Pour l'instant, nous l'activons toujours si le fichier est importé.

    systemd.services.docker-auto-label = {
      description = "Periodically applies node labels to Docker Swarm based on host capabilities";
      serviceConfig.Type = "oneshot";
      path = with pkgs; [ docker findmnt gawk coreutils ];
      script = ''
        set -e
        echo "--- Running Docker node auto-labeling check ---"
        declare -A labels_to_apply

        # 1. Vérifier si les points de montage NFS sont ACTIFS
        NFS_MOUNTS_ACTIVE=true
        for mount_point in "/data/nfs/content" "/data/nfs/containers" "/data/nfs/downloads"; do
          if ! findmnt -M "$mount_point" >/dev/null; then
            echo "NFS mount not active: $mount_point"
            NFS_MOUNTS_ACTIVE=false
            break
          fi
        done
        labels_to_apply["disk.feature.nfs"]=$NFS_MOUNTS_ACTIVE

        # 2. Vérifier si le nœud est configuré comme un nœud Ceph
        IS_CEPH_NODE=${lib.boolToString config.myConfig.isCephNode}
        labels_to_apply["disk.feature.ceph"]=$IS_CEPH_NODE

        # 3. Détecter le support du flag CPU AVX
        AVX_SUPPORT=$(grep -q avx /proc/cpuinfo && echo true || echo false)
        labels_to_apply["cpu.feature.avx"]=$AVX_SUPPORT
        
        # --- Synchronisation des Labels ---
        CURRENT_LABELS=$(docker node inspect self --format '{{range $k, $v := .Spec.Labels}}{{$k}}={{$v}}{{"\n"}}{{end}}')
        
        echo "Desired labels for this node:"
        for k in "''${!labels_to_apply[@]}"; do printf "  %s=%s\n" "$k" "''${labels_to_apply[$k]}"; done
        
        # Ajouter/Mettre à jour les labels nécessaires
        for key in "''${!labels_to_apply[@]}"; do
          value="''${labels_to_apply[$key]}"
          if ! echo "$CURRENT_LABELS" | grep -q -x "$key=$value"; then
            echo "Applying label: $key=$value"
            docker node update --label-add "$key=$value" self
          fi
        done
        
        # Retirer les labels obsolètes
        echo "$CURRENT_LABELS" | while IFS='=' read -r key value; do
          if [ -n "$key" ] && [ -z "''${labels_to_apply[$key]+_}" ]; then
            echo "Removing obsolete label: $key"
            docker node update --label-rm "$key" self
          fi
        done
        echo "--- Auto-labeling finished ---"
      '';
    };

    systemd.timers.docker-auto-label = {
      description = "Timer to periodically run Docker node auto-labeling";
      wantedBy = [ "timers.target" ];
      timerConfig = {
        Unit = "docker-auto-label.service";
        OnBootSec = "1min";
        OnUnitActiveSec = "1min";
      };
    };
  }; # Fin du bloc 'config'
}