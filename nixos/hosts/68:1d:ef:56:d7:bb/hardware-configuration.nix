# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

<<<<<<< HEAD
  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "sd_mod" "sdhci_pci" ];
  boot.initrd.kernelModules = [ "dm-snapshot" ];
=======
  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usbhid" "sdhci_pci" ];
  boot.initrd.kernelModules = [ ];
>>>>>>> a0422d0 (ajout de fichier de l'host)
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
<<<<<<< HEAD
    { device = "/dev/disk/by-uuid/874ff54b-fd3a-4e0e-8012-e394af7eb203";
=======
    { device = "/dev/disk/by-uuid/f647dffa-8d24-4ff0-a2da-163486f05ebc";
>>>>>>> a0422d0 (ajout de fichier de l'host)
      fsType = "ext4";
    };

  fileSystems."/boot" =
<<<<<<< HEAD
    { device = "/dev/disk/by-uuid/5893-2452";
=======
    { device = "/dev/disk/by-uuid/7F69-4E60";
>>>>>>> a0422d0 (ajout de fichier de l'host)
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

<<<<<<< HEAD
  fileSystems."/data/nfs/downloads" =
    { device = "192.168.111.69:/volume3/Downloads";
      fsType = "nfs4";
    };

  fileSystems."/data/nfs/content" =
    { device = "192.168.111.69:/volume3/Content";
      fsType = "nfs4";
    };

  fileSystems."/data/nfs/containers" =
    { device = "192.168.111.69:/volume3/docker";
      fsType = "nfs4";
    };

  fileSystems."/var/lib/docker/overlay2/d73c76179e460532e6c7f86da67d75377458bed7b448a1138eb7740582884b78/merged" =
    { device = "overlay";
      fsType = "overlay";
    };

  fileSystems."/var/lib/docker/overlay2/f3c19a3016b182f9ec5dd60391f450d89f4b3d6fb170162d9c48d67243bfaa0f/merged" =
    { device = "overlay";
      fsType = "overlay";
    };

  fileSystems."/var/lib/docker/overlay2/a23bbad10a53d149b83a67516e4b132977201c8ec75ad3919b42704c09cee8e5/merged" =
    { device = "overlay";
      fsType = "overlay";
    };

  fileSystems."/var/lib/docker/containers/973fe9c7a9f146429ae88c3c6eddcb42a88790f5ea8e0173fecd6ec0a0abc149/mounts/secrets" =
    { device = "tmpfs";
      fsType = "tmpfs";
    };

  fileSystems."/var/lib/ceph/osd/ceph-0" =
    { device = "tmpfs";
      fsType = "tmpfs";
    };

  fileSystems."/data/cephfs" =
    { device = "systemd-1";
      fsType = "autofs";
    };

  fileSystems."/data/cephfs" =
    { device = "192.168.111.63:/";
      fsType = "ceph";
    };

  fileSystems."/var/lib/docker/overlay2/1dc20ca05405f36e25325ef44a82fcfcca4b457e6a2b9b8989b3211309c1fddb/merged" =
    { device = "overlay";
      fsType = "overlay";
    };

  fileSystems."/var/lib/docker/containers/9ea7130db88c6f79ceac3de555456b32a6272ccae23b9d43ad219606c93719a8/mounts/secrets" =
    { device = "tmpfs";
      fsType = "tmpfs";
    };

  fileSystems."/var/lib/docker/overlay2/e09867e2ec0972cbaa509b2f7e6e9bdf715ea5121bf15e530262064e43d45d6f/merged" =
    { device = "overlay";
      fsType = "overlay";
    };

  fileSystems."/var/lib/docker/overlay2/8a7aaa3a875efb0980675f8f1af87014ae84e4032cf1419e19b8750d9d0ca727/merged" =
    { device = "overlay";
      fsType = "overlay";
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/23760326-81e0-4e35-88b1-4a658855fa7d"; }
=======
  swapDevices =
    [ { device = "/dev/disk/by-uuid/1f064eb9-d422-4f73-9bf9-d824d016b874"; }
>>>>>>> a0422d0 (ajout de fichier de l'host)
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
<<<<<<< HEAD
  # networking.interfaces.docker0.useDHCP = lib.mkDefault true;
  # networking.interfaces.docker_gwbridge.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp1s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.veth0da7a87.useDHCP = lib.mkDefault true;
  # networking.interfaces.veth139233b.useDHCP = lib.mkDefault true;
  # networking.interfaces.veth3dc5727.useDHCP = lib.mkDefault true;
  # networking.interfaces.veth8a583cf.useDHCP = lib.mkDefault true;
  # networking.interfaces.veth9a72a86.useDHCP = lib.mkDefault true;
  # networking.interfaces.vethadc195b.useDHCP = lib.mkDefault true;
  # networking.interfaces.vethce79328.useDHCP = lib.mkDefault true;
  # networking.interfaces.vlan111.useDHCP = lib.mkDefault true;
  # networking.interfaces.vlan200.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp2s0.useDHCP = lib.mkDefault true;
=======
  # networking.interfaces.enp3s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp4s0.useDHCP = lib.mkDefault true;
>>>>>>> a0422d0 (ajout de fichier de l'host)

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
