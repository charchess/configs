# databases.yml
version: '3.8'

services:
  mariadb:
    image: docker.io/mariadb:11.5.2
    environment:
      - MARIADB_ROOT_PASSWORD_FILE=/run/secrets/MARIADB_ROOT_PASSWORD
      - MARIADB_DATABASE=zabbix # Exemple si Zabbix est la seule DB, sinon MariaDB gérera plusieurs DBs
      - MARIADB_USER_FILE=/run/secrets/ZABBIX_MYSQL_USER # Si vous avez un user zabbix
      - MARIADB_PASSWORD_FILE=/run/secrets/ZABBIX_MYSQL_PASSWORD # Si vous avez un pass zabbix
      - MARIADB_innodb_force_recovery=5
    command:
      # Passe l'option de configuration directement au processus mysqld
      # Note : les options de MariaDB/MySQL en ligne de commande utilisent des tirets (-) au lieu d'underscores (_)
      - "--innodb-flush-log-at-trx-commit=1"
    volumes:
      - /data/cephfs/containers/databases/mariadb/database:/var/lib/mysql
#     - /data/nfs/containers/zabbix/export:/export # Volume Zabbix export commenté comme demandé
    secrets:
      - MARIADB_ROOT_PASSWORD
      - ZABBIX_MYSQL_USER # Décommenter si utilisé
      - ZABBIX_MYSQL_PASSWORD # Décommenter si utilisé
    networks:
      - databases_network # Réseau interne de la stack databases
      - logs_network    # AJOUTÉ : Pour envoyer les logs à Graylog
    deploy:
      mode: replicated
      replicas: 1
      resources:
        limits:
          memory: 2G # Alloue 1 Go de RAM max à MariaDB. Ajustez si nécessaire.
        reservations:
          memory: 1G # Réserve 512 Mo de RAM pour MariaDB
      placement:
        constraints:
          - node.role == worker
          # Contrainte ajoutée : MariaDB utilise un volume CephFS
          - node.labels.disk.feature.ceph == true
    logging: # AJOUTÉ : Configuration du logging vers Graylog
      driver: gelf
      options:
        gelf-address: "udp://192.168.201.66:12201" # CHANGÉ : Utilise l'adresse IP statique de Graylog
        tag: "mariadb/{{.Name}}/{{.ID}}" # Tag pour identifier les logs dans Graylog
    healthcheck: # Healthcheck pour ChromaDB (vérifie que l'API répond)
      test: ["CMD", "healthcheck.sh", "--su-mysql", "--connect"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/POSTGRES_ROOT_PASSWORD # Nouveau secret pour le superuser
    volumes:
      - /data/cephfs/containers/databases/postgres/data:/var/lib/postgresql/data
    secrets:
      - POSTGRES_ROOT_PASSWORD
    networks:
      - databases_network # Réseau interne de la stack databases
      - logs_network    # AJOUTÉ : Pour envoyer les logs à Graylog
    deploy:
      resources:
        reservations:
          memory: 512M # Réserve 512 Mo de RAM pour Postgres
        limits:
          memory: 2G   # Limite Postgres à 2 Go de RAM au maximum
      placement:
        constraints:
          - node.role == worker
          - node.hostname == emy # Conserve votre contrainte existante
          # Contrainte ajoutée : Postgres utilise un volume CephFS
          - node.labels.disk.feature.ceph == true
    logging: # AJOUTÉ : Configuration du logging vers Graylog
      driver: gelf
      options:
        gelf-address: "udp://192.168.200.66:12201" # CHANGÉ : Utilise l'adresse IP statique de Graylog
        tag: "postgres/{{.Name}}/{{.ID}}" # Tag pour identifier les logs dans Graylog
#    healthcheck: # AJOUTÉ : Healthcheck pour PostgreSQL
#      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#      start_period: 30s # Donne du temps à PostgreSQL pour démarrer

  # MongoDB: https://hub.docker.com/_/mongo/
  mongodb:
    image: "mongo:6.0.18"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    deploy:
      placement:
        constraints:
          - node.role == worker
          # Contrainte existante pour AVX
          - node.labels.cpu.feature.avx == true
          # Contrainte ajoutée : MongoDB utilise des volumes CephFS
          - node.labels.disk.feature.ceph == true
      resources:
        limits:
          memory: 2g
        reservations:
          memory: 1g
    networks:
      - databases_network # Réseau interne de la stack databases
      - logs_network # AJOUTÉ : Pour envoyer les logs à Graylog
    volumes:
      - "/data/cephfs/containers/databases/mongodb/data:/data/db"
      - "/data/cephfs/containers/databases/mongodb/config:/data/configdb"
    healthcheck: # AJOUTÉ : Healthcheck pour MongoDB
      test: ["CMD-SHELL", "mongosh --eval 'db.adminCommand(\"ping\")' --quiet"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Donne du temps à MongoDB pour démarrer
    logging: # AJOUTÉ : Configuration du logging vers Graylog
      driver: gelf
      options:
        gelf-address: "udp://192.168.200.66:12201" # Utilise l'adresse IP statique de Graylog
        tag: "mongodb/{{.Name}}/{{.ID}}" # Tag pour identifier les logs dans Graylog

  qdrant:
    image: qdrant/qdrant:v1.8
    networks:
      - databases_network
      - logs_network
    volumes:
      - /data/nfs/containers/databases/qdrant/data:/qdrant/storage
    deploy:
      replicas: 1
      mode: replicated
      labels:
        - "com.docker.portainer.stack=databases"
        - "traefik.enable=false"
      placement:
        constraints:
          - node.role == worker
          - disk.feature.nfs == true
#      resources:
#        limits:
#          memory: 1g


  # Service Redis (général)
  redis:
    image: redis:7-alpine
    hostname: redis
    command: >
      sh -c 'redis-server --requirepass "$$(cat /run/secrets/REDIS_PASSWORD)"
              --save 60 1 --appendonly yes'
    networks:
      - databases_network
      - logs_network
    volumes:
      # AJOUTÉ : Volume persistant pour les données de Redis
      - /data/cephfs/containers/databases/redis/data:/data
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker # Permet à Redis de flotter sur n'importe quel nœud worker
          # AJOUTÉ : Contrainte pour le volume CephFS
          - node.labels.disk.feature.ceph == true
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    secrets:
      - REDIS_PASSWORD
    logging:
      driver: gelf
      options:
        gelf-address: "udp://192.168.201.66:12201"
        tag: "redis/{{.Name}}/{{.ID}}"

  neo4j:
    image: neo4j:community-ubi9 # L'édition Enterprise est gratuite pour le développement solo
    ports:
      - "7474:7474" # Interface Web de Neo4j
      - "7687:7687" # Port pour la connexion des pilotes (Bolt)
    volumes:
      - /data/cephfs/containers/databases/neo4j/data:/data
    deploy:
      mode: replicated
      replicas: 1
      labels:
        - "com.docker.portainer.stack=databases"
        - "traefik.enable=true"
        - "traefik.http.routers.neo4j.rule=Host(`neo4j.truxonline.com`)"
        - "traefik.http.routers.neo4j.tls=true"
        - "traefik.http.routers.neo4j.tls.certresolver=gandi"
        - "traefik.docker.network=databases_network"
      placement:
        constraints:
          - node.role == worker
          - disk.feature.nfs == true
      resources:
        limits:
          memory: 2g
    environment:
      # Accepte la licence et définit un mot de passe
      - NEO4J_AUTH=${NEO4J_USER}:${NEO4J_PASSWORD}
      - NEO4J_dbms_memory_pagecache_size=512M
      - NEO4J_dbms_memory_heap_initial__size=512M
      - NEO4J_dbms_memory_heap_max__size=512M
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    networks:
      - databases_network # Pour que l'intent-router puisse s'y connecter
      - logs_network # Pour envoyer les logs à Graylog


# Définition des secrets utilisés dans cette stack
secrets:
  REDIS_PASSWORD:
    external: true
  MARIADB_ROOT_PASSWORD:
    external: true
  ZABBIX_MYSQL_USER: # Décommenter si utilisé
    external: true
  ZABBIX_MYSQL_PASSWORD: # Décommenter si utilisé
    external: true
  POSTGRES_ROOT_PASSWORD:
    external: true
  MONGO_PASSWORD:
    external: true
    
# Définition des réseaux utilisés par cette stack
networks:
  databases_network:
    external: true # Ce réseau sera créé avec le déploiement de cette stack
  logs_network: # AJOUTÉ : Réseau de la stack logs (Graylog), doit être externe
    external: true
