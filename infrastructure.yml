# infrastructure.yml
version: '3.8'

services:
  traefik:
    image: traefik:latest
    command:
      # Arguments minimaux, la plupart de la configuration est maintenant dans traefik.yaml
      - "--global.checknewversion=false"
      - "--global.sendanonymoususage=false"
      - "--api" # Active l'API et le dashboard
      # - "--providers.docker" # Active le provider Docker (nécessaire pour les labels)
      - "--providers.swarm" # Active le provider Swarm
      - "--providers.file" # Active le provider File
      - "--log.level=DEBUG" # Niveau de log, peut être défini ici ou dans traefik.yaml
      - "--configfile=/etc/traefik/traefik.yaml" # Spécifie le fichier de configuration statique
      # Les entrypoints et certificate resolvers ne sont plus nécessaires ici car ils sont dans traefik.yaml
      # Les configurations de providers spécifiques (endpoint, exposedbydefault, etc.) sont AUSSI dans traefik.yaml
    ports:
      # Publie chaque port sur l'hôte, et Traefik gérera les IP spécifiques en interne via entryPoints.
      - "80:80"     # Trafic HTTP (redirection)
      - "443:443"   # Trafic HTTPS (pour interne)
      - "10443:10443"   # Trafic HTTPS (pour externe)
      - "192.168.200.66:8080:8080" # Dashboard Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /data/local/containers/infrastructure/traefik/config/traefik.yaml:/etc/traefik/traefik.yaml:ro
      - /data/local/containers/infrastructure/traefik/config/external.yaml:/etc/traefik/external.yaml:ro
      - /data/local/containers/infrastructure/traefik/certs:/var/traefik/certs/
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        # Labels pour le dashboard Traefik lui-même
        - "traefik.enable=true"
        - "traefik.http.routers.traefik-http.rule=Host(`traefik.truxonline.com`)"
        - "traefik.http.routers.traefik-http.entrypoints=web"
        - "traefik.http.services.traefik-http.loadbalancer.server.port=8080"
        - "traefik.http.routers.traefik-https.rule=Host(`traefik.truxonline.com`)"
        - "traefik.http.routers.traefik-https.entrypoints=internal-secure"
        - "traefik.http.routers.traefik-https.tls=true"
        - "traefik.http.routers.traefik-https.tls.certresolver=gandi"
    secrets:
      - traefik_gandi_api_token # Le secret pour l'API Gandi
    environment:
      # Utilisation du secret via un fichier pour Traefik
      - GANDIV5_PERSONAL_ACCESS_TOKEN_FILE=/run/secrets/traefik_gandi_api_token
    networks:
      - ai_network
      - databases_network
      - divertissement_network
      - experimentation_network
      - infrastructure_network # Réseau interne à la stack infrastructure
      - logs_network # Traefik est bien connecté à ce réseau
      - media_download_network # Si des services à l'intérieur nécessitent une exposition
      - media_management_network
      - monitoring_network
      - nordvpn_ch_network     # Le réseau VPN existant
      - tools_network
    logging: # Configuration du logging vers Graylog
      driver: gelf
      options:
        gelf-address: "udp://192.168.201.66:12201" # Utilise le nom de service logs_graylog
        tag: "traefik/{{.Name}}/{{.ID}}" # Tag pour identifier les logs dans Graylog
    healthcheck: # Healthcheck pour Traefik (conservé de la version précédente)
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/dashboard || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  watchtower: # Service pour la mise à jour automatique des images Docker
    image: containrrr/watchtower:latest
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
      - WATCHTOWER_POLL_INTERVAL=3600 # Vérifie toutes les heures (en secondes)
      - WATCHTOWER_CLEANUP=true # Nettoie les anciennes images et conteneurs
      - WATCHTOWER_NOTIFICATION_URL=discord://frMVQgb8VrXhRUKC2biVclTdMDJ2pfTnOUuvI2d4N8-iuwjWznAVZQ2361Fg1mR6JNkf@1386139354526912674 # Notifications Discord
      - WATCHTOWER_NOTIFICATION_TEMPLATE=discord
      - WATCHTOWER_NOTIFICATION_REPORT_TYPE=full # ou full
#      - WATCHTOWER_NOTIFICATION_TEMPLATE="{{range .}}{{.Time.Format \"2006-01-02 15:04:05\"}} ({{.Level}}): {{.Message}}{{println}}{{end}}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Accès au démon Docker
    networks:
      - infrastructure_network # Watchtower doit être sur un réseau accessible au démon Docker
      - logs_network           # Pour envoyer les logs à Graylog
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
    logging: # Configuration du logging vers Graylog
      driver: gelf
      options:
        gelf-address: "udp://192.168.201.66:12201" # Utilise le nom de service logs_graylog
        tag: "watchtower/{{.Name}}/{{.ID}}" # Tag pour identifier les logs dans Graylog
#    healthcheck: # Healthcheck pour Watchtower (vérifie juste le démarrage du conteneur)
#      test: ["CMD-SHELL", "pgrep -f watchtower || exit 1"]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 10s

  adguardhome: # Service AdGuard Home
    image: adguard/adguardhome:latest
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Europe/Paris
    volumes:
      - /data/local/containers/infrastructure/adguardhome/work:/opt/adguardhome/work # Chemin du volume ajusté
      - /data/local/containers/infrastructure/adguardhome/conf:/opt/adguardhome/conf # Chemin du volume ajusté
    ports: # Important: Expose DNS ports. Web UI peut être via Traefik.
      - "53:53/tcp" # Standard DNS TCP
      - "53:53/udp" # Standard DNS UDP
      - "3000:3000/tcp" # Web UI, exposé directement pour le setup initial, peut être retiré si seul Traefik est utilisé
    networks:
      - infrastructure_network # Réseau interne de la stack infrastructure
      - logs_network           # Pour envoyer les logs à Graylog
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      labels: # Labels Traefik pour exposer AdGuard Home Web UI
        - "traefik.enable=true"
        - "traefik.http.routers.adguard-https.rule=Host(`adguard.truxonline.com`)"
        - "traefik.http.routers.adguard-https.entrypoints=internal-secure"
        - "traefik.http.routers.adguard-https.tls=true"
        - "traefik.http.routers.adguard-https.tls.certresolver=gandi"
        - "traefik.http.services.adguard-https.loadbalancer.server.port=3000" # Port interne de l'interface web AdGuard Home
        - "traefik.docker.network=infrastructure_network"
    logging: # Configuration du logging vers Graylog
      driver: gelf
      options:
        gelf-address: "udp://192.168.201.66:12201" # Utilise le nom de service logs_graylog
        tag: "adguardhome/{{.Name}}/{{.ID}}" # Tag pour identifier les logs dans Graylog
    healthcheck: # Healthcheck pour AdGuard Home (vérifie l'interface web)
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
  # --- Composants AWX (Ansible Tower Open Source) ---
  # Service Web d'AWX (interface utilisateur et API)
  awx_web:
    image: ansible/awx:latest
    hostname: awx-web
    command: ["/usr/bin/dumb-init", "awx", "web"]
    environment:
      POSTGRES_HOST: postgres # Se connecte au service 'postgres' de la stack databases
      POSTGRES_DB: awx # Nom de la base de données AWX (doit être créée dans le PostgreSQL partagé)
      POSTGRES_USER: awx # Utilisateur AWX (doit être créé dans le PostgreSQL partagé)
      POSTGRES_PASSWORD_FILE: /run/secrets/awx_postgres_password
      REDIS_HOST: redis # Se connecte au service 'redis' de la stack databases
      AWX_SECRET_KEY_FILE: /run/secrets/awx_secret_key
      AWX_ADMIN_USER: admin
      AWX_ADMIN_PASSWORD: password # Ceci est le mot de passe initial, CHANGEZ-LE IMMÉDIATEMENT APRÈS LE DÉPLOIEMENT
    secrets:
      - awx_postgres_password
      - awx_secret_key
    networks:
      - infrastructure_network # Pour Traefik et la communication générale
      - databases_network # Pour accéder aux services 'postgres' et 'redis'
      - logs_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.awx-web.rule=Host(`awx.truxonline.com`)"
      - "traefik.http.routers.awx-web.entrypoints=web-secure"
      - "traefik.http.routers.awx-web.tls=true"
      - "traefik.http.routers.awx-web.tls.certresolver=le"
      - "traefik.http.services.awx-web.loadbalancer.server.port=8052"
    deploy:
      mode: replicated
      replicas: 1
#      placement:
#        constraints:
#          - node.hostname == ruby # Contrainte pour déployer sur le nœud 'ruby'
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 1024M
    logging:
      driver: gelf
      options:
        gelf-address: "udp://192.168.201.66:12201"
        tag: "awx_web/{{.Name}}/{{.ID}}"

  # Service de Tâches d'AWX (exécute les playbooks Ansible)
  awx_task:
    image: ansible/awx:latest
    hostname: awx-task
    command: ["/usr/bin/dumb-init", "awx", "task"]
    environment:
      POSTGRES_HOST: postgres # Se connecte au service 'postgres' de la stack databases
      POSTGRES_DB: awx
      POSTGRES_USER: awx
      POSTGRES_PASSWORD_FILE: /run/secrets/awx_postgres_password
      REDIS_HOST: redis # Se connecte au service 'redis' de la stack databases
      AWX_SECRET_KEY_FILE: /run/secrets/awx_secret_key
    secrets:
      - awx_postgres_password
      - awx_secret_key
    networks:
      - infrastructure_network
      - databases_network # Pour accéder aux services 'postgres' et 'redis'
      - logs_network
      # Ajoutez ici tous les réseaux des autres stacks auxquels awx_task pourrait avoir besoin d'accéder
      # pour gérer des services ou des nœuds (ex: ai_network, databases_network, tools_network, etc.)
      - ai_network
      - divertissement_network
      - experimentation_network
      - media_download_network
      - media_management_network
      - monitoring_network
      - nordvpn_ch_network
      - tools_network
    volumes:
      - /data/nfs/containers/infrastructure/awx_task/data:/var/lib/awx/projects # Volume pour les projets Ansible (git clones)
    deploy:
      mode: replicated
      replicas: 1
 #     placement:
 #       constraints:
 #         - node.hostname == ruby # Contrainte pour déployer sur le nœud 'ruby'
      restart_policy:
        condition: on-failure
      resources:
        limits:
          memory: 2048M
        reservations:
          memory: 1024M
    logging:
      driver: gelf
      options:
        gelf-address: "udp://192.168.201.66:12201"
        tag: "awx_task/{{.Name}}/{{.ID}}"



# Définition des secrets utilisés dans cette stack
secrets:
  traefik_gandi_api_token: # Le secret pour l'API Gandi
    external: true
  awx_postgres_password:
    external: true
  awx_db_password: # Ce secret est défini mais non directement utilisé par l'image ansible/awx, mais peut être utile pour des scripts personnalisés
    external: true
  awx_secret_key:
    external: true

# Définition des réseaux utilisés par cette stack
networks:
  infrastructure_network:
    external: true # Ce réseau sera créé avec le déploiement de cette stack
  # Réseaux externes des autres stacks avec lesquels les services de cette stack doivent communiquer
  ai_network:
    external: true
  divertissement_network:
    external: true
  tools_network:
    external: true
  media_management_network:
    external: true
  logs_network:
    external: true
  monitoring_network:
    external: true
  experimentation_network:
    external: true
  media_download_network:
    external: true
  nordvpn_ch_network: # Le réseau VPN existant
    external: true
  databases_network: # Ce réseau est toujours nécessaire si Traefik doit router vers des services DB
    external: true
